// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------
// ENUMS
// -----------------------------------------
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  PROBATION
  TERMINATED
  RESIGNED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum LeaveType {
  SICK
  VACATION
  UNPAID
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
}

enum InterviewStage {
  APPLIED
  SCREENING
  INTERVIEW
  OFFER
  HIRED
  REJECTED
}

// -----------------------------------------
// HR MODELS
// -----------------------------------------

// Employee Management
model Employee {
  id              String             @id @default(uuid())
  firstName       String
  lastName        String
  email           String             @unique
  phone           String?
  gender          Gender?
  dob             DateTime?
  hireDate        DateTime           @default(now())
  status          EmploymentStatus   @default(ACTIVE)
  jobType         JobType
  jobTitle        String
  department      Department         @relation(fields: [departmentId], references: [id])
  departmentId    String
  manager         Employee?          @relation("EmployeeManager", fields: [managerId], references: [id])
  managerId       String?
  subordinates    Employee[]         @relation("EmployeeManager")
  skills          SkillAssignment[]
  certifications  Certification[]
  contracts       Contract[]
  attendances     Attendance[]
  leaves          LeaveRequest[]
  evaluations     Evaluation[]       // evaluations about this employee
  givenEvaluations Evaluation[]      @relation("Evaluator")           // evaluations performed by this employee
  documents       EmployeeDocument[]
  interviewsTaken Interview[]        @relation("InterviewInterviewer") // interviews conducted by this employee
  approvedLeaves  LeaveRequest[]     @relation("ApprovedBy")          // leave requests approved by this employee
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

// Department
model Department {
  id          String       @id @default(uuid())
  name        String
  employees   Employee[]
  jobPostings JobPosting[] // added opposite side for JobPosting
}

// Skills & Certifications
model Skill {
  id          String             @id @default(uuid())
  name        String
  description String?
  employees   SkillAssignment[]
}

model SkillAssignment {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  skill      Skill    @relation(fields: [skillId], references: [id])
  skillId    String
  level      Int      // 1-5 scale
}

model Certification {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  name       String
  issuer     String?
  issuedAt   DateTime
  expiresAt  DateTime?
}

// Contracts
model Contract {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  startDate  DateTime
  endDate    DateTime?
  document   String?   // file path / URL
}

// Employee Documents
model EmployeeDocument {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  name       String
  fileUrl    String
  uploadedAt DateTime @default(now())
}

// Evaluations (Probation & Performance)
model Evaluation {
  id          String    @id @default(uuid())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  evaluator   Employee? @relation("Evaluator", fields: [evaluatorId], references: [id])
  evaluatorId String?
  date        DateTime  @default(now())
  score       Int
  feedback    String?
  probation   Boolean   @default(false)
}

// -----------------------------------------
// Recruitment & Hiring
// -----------------------------------------
model JobPosting {
  id           String       @id @default(uuid())
  title        String
  description  String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String
  isActive     Boolean      @default(true)
  candidates   Candidate[]
  createdAt    DateTime     @default(now())
}

model Candidate {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  email          String
  phone          String?
  resumeUrl      String?
  stage          InterviewStage   @default(APPLIED)
  score          Int?
  feedback       String?
  jobPosting     JobPosting       @relation(fields: [jobPostingId], references: [id])
  jobPostingId   String
  interviews     Interview[]
  createdAt      DateTime         @default(now())
}

model Interview {
  id           String     @id @default(uuid())
  candidate    Candidate  @relation(fields: [candidateId], references: [id])
  candidateId  String
  interviewer  Employee?  @relation("InterviewInterviewer", fields: [interviewerId], references: [id])
  interviewerId String?
  date         DateTime
  feedback     String?
  rating       Int?
}

// -----------------------------------------
// Time & Attendance
// -----------------------------------------
model Attendance {
  id          String           @id @default(uuid())
  employee    Employee         @relation(fields: [employeeId], references: [id])
  employeeId  String
  date        DateTime
  status      AttendanceStatus @default(PRESENT)
  checkIn     DateTime?
  checkOut    DateTime?
  overtime    Float?           // hours
}

model LeaveRequest {
  id           String      @id @default(uuid())
  employee     Employee    @relation(fields: [employeeId], references: [id])
  employeeId   String
  type         LeaveType
  startDate    DateTime
  endDate      DateTime
  status       LeaveStatus @default(PENDING)
  appliedAt    DateTime    @default(now())
  approvedBy   Employee?   @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById String?
}
