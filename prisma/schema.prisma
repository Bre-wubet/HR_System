// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------
// ENUMS
// -----------------------------------------
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  PROBATION
  TERMINATED
  RESIGNED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum LeaveType {
  SICK
  VACATION
  UNPAID
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
}

enum InterviewStage {
  APPLIED
  SCREENING
  INTERVIEW
  OFFER
  HIRED
  REJECTED
}

// -----------------------------------------
// HR MODELS
// -----------------------------------------

// Employee Management
model Employee {
  id              String             @id @default(uuid())
  firstName       String
  lastName        String
  email           String             @unique
  phone           String?
  gender          Gender?
  dob             DateTime?
  hireDate        DateTime           @default(now())
  status          EmploymentStatus   @default(ACTIVE)
  jobType         JobType
  jobTitle        String
  salary          Float?             // Current salary
  department      Department         @relation(fields: [departmentId], references: [id])
  departmentId    String
  manager         Employee?          @relation("EmployeeManager", fields: [managerId], references: [id])
  managerId       String?
  subordinates    Employee[]         @relation("EmployeeManager")
  skills          SkillAssignment[]
  certifications  Certification[]
  assessedSkills  SkillAssignment[] @relation("SkillAssessor")
  verifiedCertifications Certification[] @relation("CertificationVerifier")
  contracts       Contract[]
  attendances     Attendance[]
  leaves          LeaveRequest[]
  evaluations     Evaluation[]       // evaluations about this employee
  givenEvaluations Evaluation[]      @relation("Evaluator")           // evaluations performed by this employee
  documents       EmployeeDocument[]
  interviewsTaken Interview[]        @relation("InterviewInterviewer") // interviews conducted by this employee
  approvedLeaves  LeaveRequest[]     @relation("ApprovedBy")          // leave requests approved by this employee
  careerProgressions CareerProgression[] // career progression history
  approvedProgressions CareerProgression[] @relation("CareerProgressionApprover") // progressions approved by this employee
  user            User?              // Link to authentication user
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

// Department
model Department {
  id          String       @id @default(uuid())
  name        String
  employees   Employee[]
  jobPostings JobPosting[] // added opposite side for JobPosting
}

// Skills & Certifications
model Skill {
  id            String             @id @default(uuid())
  name          String
  description   String?
  category      String?            // Technical, Soft Skills, Leadership, etc.
  subcategory   String?            // Programming, Communication, etc.
  isRequired    Boolean            @default(false) // Required skill for certain roles
  skillLevels   SkillLevel[]       // Defined proficiency levels
  employees     SkillAssignment[]
  jobPostings   JobPostingSkill[]  // Skills required for job postings
  certifications CertificationSkill[] // Skills validated by certifications
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model SkillAssignment {
  id            String   @id @default(uuid())
  employee      Employee @relation(fields: [employeeId], references: [id])
  employeeId    String
  skill         Skill    @relation(fields: [skillId], references: [id])
  skillId       String
  level         Int      // 1-5 scale
  evidence      String?  // Evidence of skill proficiency
  notes         String?  // Additional notes about the skill
  assessedBy    Employee? @relation("SkillAssessor", fields: [assessedById], references: [id])
  assessedById  String?
  assessedAt    DateTime?
  isSelfAssessed Boolean @default(true)
  lastUpdated   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SkillLevel {
  id          String @id @default(uuid())
  skill       Skill  @relation(fields: [skillId], references: [id])
  skillId     String
  level       Int    // 1-5 scale
  title       String // Beginner, Intermediate, Advanced, Expert, Master
  description String // What this level means
  requirements String // What's required to achieve this level
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Certification {
  id              String   @id @default(uuid())
  employee        Employee @relation(fields: [employeeId], references: [id])
  employeeId      String
  name            String
  issuer          String?
  credentialId    String?  // Certification number/ID
  issuedAt        DateTime
  expiresAt       DateTime?
  verifiedAt      DateTime?
  verifiedBy      Employee? @relation("CertificationVerifier", fields: [verifiedById], references: [id])
  verifiedById    String?
  status          String   @default("ACTIVE") // ACTIVE, EXPIRED, REVOKED, PENDING_VERIFICATION
  documentUrl     String?  // Link to certificate document
  skills          CertificationSkill[] // Skills this certification validates
  renewalReminder Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CertificationSkill {
  id             String       @id @default(uuid())
  certification  Certification @relation(fields: [certificationId], references: [id])
  certificationId String
  skill          Skill        @relation(fields: [skillId], references: [id])
  skillId        String
  level          Int          // Skill level validated by this certification
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model JobPostingSkill {
  id          String     @id @default(uuid())
  jobPosting  JobPosting @relation(fields: [jobPostingId], references: [id])
  jobPostingId String
  skill       Skill      @relation(fields: [skillId], references: [id])
  skillId     String
  required    Boolean    @default(true) // Required vs nice-to-have
  minLevel    Int        @default(1) // Minimum skill level required
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// Contracts
model Contract {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  startDate  DateTime
  endDate    DateTime?
  document   String?   // file path / URL
}

// Employee Documents
model EmployeeDocument {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  name       String
  fileUrl    String
  uploadedAt DateTime @default(now())
}

// Evaluations (Probation & Performance)
model Evaluation {
  id          String    @id @default(uuid())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  evaluator   Employee? @relation("Evaluator", fields: [evaluatorId], references: [id])
  evaluatorId String?
  date        DateTime  @default(now())
  score       Int
  feedback    String?
  probation   Boolean   @default(false)
}

// -----------------------------------------
// Recruitment & Hiring
// -----------------------------------------
model JobPosting {
  id           String       @id @default(uuid())
  title        String
  description  String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String
  isActive     Boolean      @default(true)
  candidates   Candidate[]
  skills       JobPostingSkill[] // Skills required for this job
  createdAt    DateTime     @default(now())
}

model Candidate {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  email          String
  phone          String?
  resumeUrl      String?
  stage          InterviewStage   @default(APPLIED)
  score          Int?
  feedback       String?
  jobPosting     JobPosting       @relation(fields: [jobPostingId], references: [id])
  jobPostingId   String
  interviews     Interview[]
  createdAt      DateTime         @default(now())
}

model Interview {
  id           String     @id @default(uuid())
  candidate    Candidate  @relation(fields: [candidateId], references: [id])
  candidateId  String
  interviewer  Employee?  @relation("InterviewInterviewer", fields: [interviewerId], references: [id])
  interviewerId String?
  date         DateTime
  feedback     String?
  rating       Int?
}

// -----------------------------------------
// Time & Attendance
// -----------------------------------------
model Attendance {
  id          String           @id @default(uuid())
  employee    Employee         @relation(fields: [employeeId], references: [id])
  employeeId  String
  date        DateTime
  status      AttendanceStatus @default(PRESENT)
  checkIn     DateTime?
  checkOut    DateTime?
  overtime    Float?           // hours
}

model LeaveRequest {
  id           String      @id @default(uuid())
  employee     Employee    @relation(fields: [employeeId], references: [id])
  employeeId   String
  type         LeaveType
  startDate    DateTime
  endDate      DateTime
  status       LeaveStatus @default(PENDING)
  appliedAt    DateTime    @default(now())
  approvedBy   Employee?   @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById String?
}

// Career Progression Tracking
model CareerProgression {
  id                   String   @id @default(uuid())
  employee             Employee @relation(fields: [employeeId], references: [id])
  employeeId           String
  type                 String   // PROMOTION, TRANSFER, DEMOTION, LATERAL_MOVE
  previousJobTitle     String?
  newJobTitle          String?
  previousSalary       Float?
  newSalary            Float?
  previousDepartmentId String?
  newDepartmentId      String?
  previousManagerId    String?
  newManagerId         String?
  effectiveDate        DateTime @default(now())
  reason               String?
  status               String   @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedBy           Employee? @relation("CareerProgressionApprover", fields: [approvedById], references: [id])
  approvedById         String?
  approvedAt           DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// -----------------------------------------
// AUTHENTICATION & AUTHORIZATION
// -----------------------------------------

// User Authentication
model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String
  firstName         String
  lastName          String
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  lastLoginAt       DateTime?
  passwordChangedAt DateTime @default(now())
  employee          Employee? @relation(fields: [employeeId], references: [id])
  employeeId        String?  @unique
  roles             UserRole[]
  refreshTokens     RefreshToken[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Roles
model Role {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Permissions
model Permission {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  resource    String          // e.g., 'employee', 'recruitment', 'attendance'
  action      String          // e.g., 'create', 'read', 'update', 'delete'
  roles       RolePermission[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// User-Role relationship
model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
}

// Role-Permission relationship
model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
}

// Refresh Tokens
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
